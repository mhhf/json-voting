'use strict';

// For geth
if (typeof dapple === 'undefined') {
  var dapple = {};
}

if (typeof web3 === 'undefined' && typeof Web3 === 'undefined') {
  var Web3 = require('web3');
}

dapple['src'] = (function builder () {
  var environments = {};

  function ContractWrapper (headers, _web3) {
    if (!_web3) {
      throw new Error('Must supply a Web3 connection!');
    }

    this.headers = headers;
    this._class = _web3.eth.contract(headers.interface);
  }

  ContractWrapper.prototype.deploy = function () {
    var args = new Array(arguments);
    args[args.length - 1].data = this.headers.bytecode;
    return this._class.new.apply(this._class, args);
  };

  // Wrap pass-through functions by name.
  var passthroughs = ['at', 'new'];
  for (var i = 0; i < passthroughs.length; i += 1) {
    ContractWrapper.prototype[passthroughs[i]] = (function (passthrough) {
      return function () {
        return this._class[passthrough].apply(this._class, arguments);
      };
    })(passthroughs[i]);
  }

  function constructor (_web3, env) {
    if (!env) {
      env = {};
    }
    while (typeof env !== 'object') {
      env = environments[env];
    }

    if (typeof _web3 === 'undefined') {
      if (!env.rpcURL) {
        throw new Error('Need either a Web3 instance or an RPC URL!');
      }
      _web3 = new Web3(new Web3.providers.HttpProvider(env.rpcURL));
    }

    this.headers = {
      'migration': {
        'interface': [],
        'solidity_interface': 'contract migration{}',
        'bytecode': '6060604052600a8060106000396000f360606040526008565b00'
      },
      'only_consens': {
        'interface': [
          {
            'inputs': [],
            'type': 'constructor'
          }
        ],
        'solidity_interface': 'contract only_consens{function only_consens();}',
        'bytecode': '60606040525b5b600a8060126000396000f360606040526008565b00'
      },
      'org': {
        'interface': [
          {
            'constant': false,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              }
            ],
            'name': 'evolve',
            'outputs': [
              {
                'name': '',
                'type': 'bool'
              }
            ],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_candidate',
                'type': 'string'
              }
            ],
            'name': 'propose',
            'outputs': [],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [],
            'name': 'numOrgs',
            'outputs': [
              {
                'name': 'number',
                'type': 'uint256'
              }
            ],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_candidate',
                'type': 'string'
              },
              {
                'name': '_vote',
                'type': 'uint256'
              }
            ],
            'name': 'vote',
            'outputs': [],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [],
            'name': 'getAll',
            'outputs': [
              {
                'name': 'names',
                'type': 'bytes32[]'
              }
            ],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_evolutionSchema',
                'type': 'bytes32'
              },
              {
                'name': 'vote',
                'type': 'uint256'
              }
            ],
            'name': 'voteEvolution',
            'outputs': [],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_addr',
                'type': 'address'
              },
              {
                'name': '_value',
                'type': 'uint256'
              }
            ],
            'name': 'send',
            'outputs': [],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '',
                'type': 'uint256'
              }
            ],
            'name': 'evolutionSchemasArray',
            'outputs': [
              {
                'name': '',
                'type': 'bytes32'
              }
            ],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': 'name',
                'type': 'bytes32'
              },
              {
                'name': '_language',
                'type': 'bytes32'
              }
            ],
            'name': 'newOrg',
            'outputs': [
              {
                'name': '',
                'type': 'bool'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_addr',
                'type': 'address'
              }
            ],
            'name': 'getShares',
            'outputs': [
              {
                'name': 'shares',
                'type': 'uint256'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              }
            ],
            'name': 'getConsens',
            'outputs': [
              {
                'name': '_candidate',
                'type': 'string'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '',
                'type': 'uint256'
              }
            ],
            'name': 'orgasArray',
            'outputs': [
              {
                'name': '',
                'type': 'bytes32'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              }
            ],
            'name': 'getCandidatesLength',
            'outputs': [
              {
                'name': 'numCandidates',
                'type': 'uint256'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              }
            ],
            'name': 'getConsensIndex',
            'outputs': [
              {
                'name': '_index',
                'type': 'uint256'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              }
            ],
            'name': 'info',
            'outputs': [
              {
                'name': 'numOwners',
                'type': 'uint256'
              },
              {
                'name': 'size',
                'type': 'uint256'
              },
              {
                'name': 'numCandidates',
                'type': 'uint256'
              },
              {
                'name': 'language',
                'type': 'bytes32'
              },
              {
                'name': 'numEvolutions',
                'type': 'uint256'
              }
            ],
            'type': 'function'
          },
          {
            'constant': true,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_at',
                'type': 'uint256'
              }
            ],
            'name': 'getCandidateAt',
            'outputs': [
              {
                'name': '_candidate',
                'type': 'string'
              }
            ],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': 'name',
                'type': 'bytes32'
              },
              {
                'name': '_L_1',
                'type': 'bytes32'
              },
              {
                'name': '_L_2',
                'type': 'bytes32'
              },
              {
                'name': '_migration',
                'type': 'string'
              }
            ],
            'name': 'newEvolutionSchema',
            'outputs': [
              {
                'name': '',
                'type': 'bool'
              }
            ],
            'type': 'function'
          },
          {
            'constant': false,
            'inputs': [
              {
                'name': '_orga',
                'type': 'bytes32'
              },
              {
                'name': '_evolutionSchema',
                'type': 'bytes32'
              }
            ],
            'name': 'proposeEvolution',
            'outputs': [
              {
                'name': '',
                'type': 'bool'
              }
            ],
            'type': 'function'
          },
          {
            'inputs': [],
            'type': 'constructor'
          }
        ],
        'solidity_interface': 'contract org{function org();function evolve(bytes32 _orga)returns(bool );function propose(bytes32 _orga,string _candidate);function numOrgs()constant returns(uint256 number);function vote(bytes32 _orga,string _candidate,uint256 _vote);function getAll()constant returns(bytes32[] names);function voteEvolution(bytes32 _orga,bytes32 _evolutionSchema,uint256 vote);function send(bytes32 _orga,address _addr,uint256 _value);function evolutionSchemasArray(uint256 )constant returns(bytes32 );function newOrg(bytes32 name,bytes32 _language)returns(bool );function getShares(bytes32 _orga,address _addr)constant returns(uint256 shares);function getConsens(bytes32 _orga)constant returns(string _candidate);function orgasArray(uint256 )constant returns(bytes32 );function getCandidatesLength(bytes32 _orga)constant returns(uint256 numCandidates);function getConsensIndex(bytes32 _orga)constant returns(uint256 _index);function info(bytes32 _orga)constant returns(uint256 numOwners,uint256 size,uint256 numCandidates,bytes32 language,uint256 numEvolutions);function getCandidateAt(bytes32 _orga,uint256 _at)constant returns(string _candidate);function newEvolutionSchema(bytes32 name,bytes32 _L_1,bytes32 _L_2,string _migration)returns(bool );function proposeEvolution(bytes32 _orga,bytes32 _evolutionSchema)returns(bool );}',
        'bytecode': ''
      }
    };

    this.classes = {};
    for (var key in this.headers) {
      this.classes[key] = new ContractWrapper(this.headers[key], _web3);
    }

    this.objects = {};
    for (var i in env.objects) {
      var obj = env.objects[i];
      this.objects[i] = this.classes[obj['class']].at(obj.address);
    }
  }

  return {
    class: constructor,
    environments: environments
  };
})();

if (typeof module !== 'undefined' && module.exports) {
  module.exports = dapple['src'];
}
