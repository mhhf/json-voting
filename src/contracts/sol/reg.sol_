import "dapple/debug.sol";

contract Reg is Debug {

  // I know, but premature optimization is the root of all evil
  mapping (byte => mapping (byte => byte)) R;
  // N or T = 0x00 => N or T = epsilon
  // N == 0x01 => Start rule
  // N == 0xff => Finish rule

  // Gets an byte array where each byte is (N -> t N)
  // i%3=0 is current rule
  // i%3=1 is terminal
  // i%3=2 is next rule
  function fromNormalForm(bytes L) {
    if( L.length % 3 != 0 )
      throw;
    // assume L is correct and in normal form.
    // TODO - test if L ist correct and unambigous
    for(var i=0; i < L.length; i+=3 ) {
      R[L[i]][L[i+1]]=L[i+2];
    }
  }

  // although Recursive Descent Parsing is easy to read and implement
  // this can fast increase the callstacksize
  // TODO: reimplement this without recursion
  function fromRegEx(bytes L) {
    evalR(L, 0x01, 0x02, 0);
  }
  // R -> S | S* | S*R;
  function evalR(bytes L, uint rule, uint j) internal returns (uint _j, uint _rule){
    // .S | .S* | .S*R
    uint __rule;
    uint[256] memory _o;
    uint _oi;
    (j, __rule, _oi) = evalS(L, rule, rule, rule+1, j, _o, 0);
    // S. | S.* | S.*R
    if(j == L.length || L[j] != byte('*')) { // S.
      return (j, __rule);
    } else if(L[j] == byte('*')) { // S.* | S.*R
      // PROBLEM:
      // how to return an array
      // for each saved options in PREVIOUS evalS I need to add a new rule
      for(var i=0; i<_oi; i+=2) {
        /* log_bytes1(L[_o[i]]); */
        R[byte(_o[i+1])][L[_o[i]]]=byte(rule); // backwards step
      }
      j++;
    }
    rule = __rule;

    // S*. | S*.R
    if(j == L.length) { // S*.
      return (j,rule); // success
    } else { // S*.R
      return evalR(L, rule, nextrule, j); // success
    }
  }
  // S -> r | rS | r '|' S | '(' S ')';
  function evalS(bytes L, uint rule, uint startrule, uint memrule, uint j, uint[256] o, uint oi) internal returns (uint _j, uint _rule, uint _oi) {
    //  .r | .rS | .r '|' S | .'(' S ')';
    if( L[j] == byte('(') ) { // .'(' S ')'
      j++;
      (j, rule, oi) = evalS(L, rule, startrule, nextrule, j, o, oi);
      if( L[j] == ')') {
        j++;
        return (j, rule, oi); // success
      } else {
        throw;
      }
    } else { //  .r | .r S | .r '|' S
      if(o[oi] == 0x00) {
        log_uint(j);
        o[oi] = j; // position of lokahead
        o[oi+1] = rule;
      }
      R[byte(rule)][L[j]]=byte(nextrule);
      rule = nextrule;
      nextrule++;
      j++;
      //  r. | r .S | r .'|' S
      if( j == L.length ||L[j] == byte(')') ||L[j] == byte('*') ) { // r.
        return (j, rule, oi); // success
      } else if (L[j] == byte('|')) { // r .'|' S
        j++;
        // r '|' .S
        oi+=2;
        (j, rule, oi) = evalS(L, startrule, startrule, nextrule, j, o, oi);
        return (j, rule, oi); // success
      } else { // r .S
        (j, rule, oi) = evalS(L, rule, startrule, nextrule, j, o, oi);
        return (j, rule, oi); // success
      }
    }
  }


  // start R;
  // R -> S | S* | S*R;
  // S -> r | rS | r '|' S | '(' S ')';
  //
  // R = 0x1x
  // S = 0x2x
  //
  // R -> S         == 0x01
  // R -> S*        == 0x02
  // R -> S*R       == 0x03
  // S -> r         == 0x04
  // S -> r S       == 0x05
  // S -> r '|' S   == 0x06
  // S -> '(' S ')' == 0x07
  //
  // CONCLUSION: I'm writing my own shift reduce parser here
  // => This is hard, try implement it recursivelly
  /* function fromRegEx__(bytes L) { */
  /*   // i % 2 == 0 => "current Rule" */
  /*   // i % 2 == 1 => "rule Pointer" */
  /*   uint[] rs; */
  /*   rs.length+=2; */
  /*   rs[0] = 0x01; */
  /*   rs[1] = 0x00; */
  /*   for(var i=0; i<L.length; i++ ) { */
  /*     if(rs[rs.length - 2] == byte(0x01)) { // R */
  /*       if(rs[rs.length-1] == 0x00) {          // .S | .S* | .S*S */
  /*         // Eval S */
  /*         rs.length += 2; */
  /*         rs[rs.length - 2] = 0x02; */
  /*         rs[rs.length - 1] = 0x00; */
  /*       } else if(rs[rs.length - 1] == 0x01) { // S. | S.* | S.*S */
  /*         // if last => success */
  /*         if( L[i] == byte('*') ) { */
  /*           // found * */
  /*           rs[rs.length - 1]++; */
  /*         } else { */
  /*           throw; */
  /*         } */
  /*       } else if(rs[rs.length - 1] == 0x02) { // S*. | S*.S */
  /*         // if last => success */
  /*         // Eval S */
  /*         rs.length += 2; */
  /*         rs[rs.length - 2] = 0x02; */
  /*         rs[rs.length - 1] = 0x00; */
  /*       } else { */
  /*         throw; */
  /*       } */
  /*     } else if (rs[rs.length - 2] == byte(0x02)) { // S */
  /*       if (rs[rs.length-1] == 0x00) {        // .r | .r S | .r '|' S | .'(' S ')' */
  /*         if( L[i] == byte('(') ) { // S -> '(' S ')' */
  /*           // found Rule -> set */
  /*           rc[rc.length - 1]++; */
  /*         } else { // otherwise */
  /*           // add r to expected */
  /*           rc[rc.length - 1]++; */
  /*         } */
  /*       } else if (rs[rs.length-1] == 0x01) { // r. | r .S | r .'|' S | '(' .S ')' */
  /*         // if last => success */
  /*         if (L[i] == byte('|')) { */
  /*           // found OR */
  /*           rc[rc.length]++; */
  /*         } else if(L[i] == byte('*') ||L[i] == byte(')')) { // not last and invalid symbol => 0x04 */
  /*           i--; */
  /*           rc.length -= 2; // REDUCE */
  /*         } else { */
  /*           // Eval S */
  /*           rc[rc.length-1]++; */
  /*           rc[rc.length]+=2; */
  /*           rs[rs.length - 2] = 0x02; */
  /*           rs[rs.length - 1] = 0x00; */
  /*           i--; */
  /*         } */
  /*       } else if (rs[rs.length-1] == 0x02) { //      r S. | r '|' .S | '(' S .')' */
  /*         if( L[i] == byte('*') ||L[i] == byte('') ) */
  /*          */
  /*       } else if (rs[rs.length-1] == 0x03) { //             r '|' S. | '(' S ')'. */
  /*       } else { */
  /*         throw; */
  /*       } */
  /*     } */
  /*   } */
  /* } */





  // TODO - rewrite
  function fromRegEx_(bytes L) {
    uint rc = 0x01;
    byte[] rs;
    // assume L is propper formated
    // todo validate on the fly
    for(var i=0; i < L.length; i++ ) {
      /* if(i == L.length - 1) { */
      /*    */
      /* } */
      if( L[i] == byte('(') ) {
        /* rs.length++; */
        /* rs[rs.length - 1] = byte(rc); */
        /* r = byte(0x00); // clear registry */
      } else if ( L[i] == byte(')') ) {
        /* r = rs[rs.length - 1]; */
        /* rs.length--; */
        // do nothing
      } else if (L[i] == byte('*')) {
          /* R[rs[rs.length-2]][rs[rs.length-1]] = rs[rs.length-2]; */
          /* if (i == L.length - 1) { // last element */
          /*   R[rs[rs.length-2]][rs[rs.length-3]] = byte(0x00); */
          /* } else { */
          /*   R[rs[rs.length-2]][rs[rs.length-3]] = rc; */
          /* } */
      } else if (L[i] == byte('|')) {
        /*   R[rs[rs.length-2]][rs[rs.length-1]] = byte(rc); */
        /*   rs.length+=2; */
        /*   rs[rs.length-2] = rs[rs.length-6]; */
        /*   i++; */
        /* rs[rs.length - 1] = L[i]; */
      } else {
        if( rc > 0x01 ) {
          R[rs[rs.length-2]][rs[rs.length-1]] = byte(rc);
        } else {
          rs.length+=2;
          rs[rs.length - 2] = byte(rc);
          rs[rs.length - 1] = L[i];
          rs.length+=2;
        }
        rs[rs.length - 2] = byte(rc);
        rs[rs.length - 1] = L[i];
        rc++;
      }
    }
    R[rs[rs.length-2]][rs[rs.length-1]] = byte(0xff);
  }

  // receives a candidate in typed encoding
  function validate( bytes word ) returns(bool valide){
    byte rule = byte(0x01);
    for( var i=0; i<word.length; i++) {
      /* log_bytes("----------"); */
      /* log_bytes1(rule); */
      /* log_bytes1(word[i]); */
      rule = R[rule][word[i]];
      /* log_bytes1(rule); */
      // if no Rule found
      if( rule == byte(0x00) && i<word.length-1 )
        return false;
    }
    return ((rule >= byte(0xff))||(R[rule][byte(0x00)] >= byte(0xff)));
  }


}
