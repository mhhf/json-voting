"use strict";

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var factory = function factory(Pudding) {
  // Inherit from Pudding. The dependency on Babel sucks, but it's
  // the easiest way to extend a Babel-based class. Note that the
  // resulting .js file does not have a dependency on Babel.

  var org = (function (_Pudding) {
    _inherits(org, _Pudding);

    function org() {
      _classCallCheck(this, org);

      _get(Object.getPrototypeOf(org.prototype), "constructor", this).apply(this, arguments);
    }

    return org;
  })(Pudding);

  ;

  // Set up specific data for this class.
  org.abi = [{ "constant": false, "inputs": [{ "name": "_orga", "type": "bytes32" }], "name": "evolve", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_candidate", "type": "string" }], "name": "propose", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "numOrgs", "outputs": [{ "name": "number", "type": "uint256" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_candidate", "type": "string" }, { "name": "_vote", "type": "uint256" }], "name": "vote", "outputs": [], "type": "function" }, { "constant": true, "inputs": [], "name": "getAll", "outputs": [{ "name": "names", "type": "bytes32[]" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_evolutionSchema", "type": "bytes32" }, { "name": "vote", "type": "uint256" }], "name": "voteEvolution", "outputs": [], "type": "function" }, { "constant": false, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_addr", "type": "address" }, { "name": "_value", "type": "uint256" }], "name": "send", "outputs": [], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "evolutionSchemasArray", "outputs": [{ "name": "", "type": "bytes32" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "name", "type": "bytes32" }, { "name": "_language", "type": "bytes32" }], "name": "newOrg", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_addr", "type": "address" }], "name": "getShares", "outputs": [{ "name": "shares", "type": "uint256" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_orga", "type": "bytes32" }], "name": "getConsens", "outputs": [{ "name": "_candidate", "type": "string" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "orgasArray", "outputs": [{ "name": "", "type": "bytes32" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_orga", "type": "bytes32" }], "name": "getCandidatesLength", "outputs": [{ "name": "numCandidates", "type": "uint256" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_orga", "type": "bytes32" }], "name": "getConsensIndex", "outputs": [{ "name": "_index", "type": "uint256" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_orga", "type": "bytes32" }], "name": "info", "outputs": [{ "name": "numOwners", "type": "uint256" }, { "name": "size", "type": "uint256" }, { "name": "numCandidates", "type": "uint256" }, { "name": "language", "type": "bytes32" }, { "name": "numEvolutions", "type": "uint256" }], "type": "function" }, { "constant": true, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_at", "type": "uint256" }], "name": "getCandidateAt", "outputs": [{ "name": "_candidate", "type": "string" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "name", "type": "bytes32" }, { "name": "_L_1", "type": "bytes32" }, { "name": "_L_2", "type": "bytes32" }, { "name": "_migration", "type": "string" }], "name": "newEvolutionSchema", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "constant": false, "inputs": [{ "name": "_orga", "type": "bytes32" }, { "name": "_evolutionSchema", "type": "bytes32" }], "name": "proposeEvolution", "outputs": [{ "name": "", "type": "bool" }], "type": "function" }, { "inputs": [], "type": "constructor" }];
  org.binary = "6060604052610fc5806100126000396000f3606060405236156100da5760e060020a600035046301baa96881146100dc578063042e9a43146101d457806315a55fc51461025e5780634f5b75c51461026857806353ed51431461032e5780635562abd2146103965780635720e67e146103d257806358a2bcc7146104135780635e1d754b146104505780635ebb58fb14610477578063873ab555146104ad57806397e76451146105845780639919ebe9146105c1578063af166b0c146105ea578063b64a097e146106b3578063df8672541461070e578063e394527a146107a9578063ee28743214610811575b005b6105d8600435600081815260036020526040812081806001818080805b600688015460ff85161015610b3b5760009250600091505b875460ff83161015610b8057875460018901906000908a90859081101561000257908252602080832090910154600160a060020a0316825291909152604081205460068a018054919260078c0192909190889081101561000257908252602080832090910154825291909152604081208a549091908b908690811015610002579060005260206000209001600090546101009190910a9004600160a060020a03168152602081019190915260400160002054029092019160019190910190610111565b60408051602060248035600481810135601f81018590048502860185019096528585526100da9581359591946044949293909201918190840183828082843750949650505050505050600082815260036020819052604090912001805460018101808355909190828015829011610d6657818360005260206000209182019101610d669190610df2565b6105d86001545b90565b60408051602060248035600481810135601f81018590048502860185019096528585526100da95813595919460449492939092019181908401838280828437509496505093359350505050806003600050600085815260200190815260200160002060005060050160005083604051808280519060200190808383829060006004602084601f0104600302600f01f15090910193845250506040805192839003602090810190932033600160a060020a0316600090815293529091209190915550505050565b61084360408051602081810183526000825260018054845181840281018401909552808552929392909183018282801561038a57602002820191906000526020600020905b816000505481526020019060010190808311610373575b50505050509050610265565b60043560009081526003602090815260408083206024358452600701825280832033600160a060020a03168452909152902060443590556100da565b6100da600435602435604435600083815260036020908152604080832033600160a060020a031684526001810190925290912054829010156109d057610002565b6105d860043560028054829081101561000257506000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015481565b6105d8600435602435600082815260036020526040812060028101548214610cbb57610cb4565b6105d86004356024356000828152600360209081526040808320600160a060020a03851684526001019091529020545b92915050565b61088d60043560408051602081810183526000808352848152600390915291822090919081908180805b6003840154831015610e72575060009050805b8354811015610ef657835460018501906000908690849081101561000257908252602080832090910154600160a060020a0316825291909152604090205460038501805460058701919086908110156100025790600052602060002090016000506040518082805460018160011615610100020316600290048015610f375780601f10610f15576101008083540402835291820191610f37565b6105d860043560018054829081101561000257506000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015481565b600435600090815260036020819052604090912001545b60408051918252519081900360200190f35b6105d86004356000818152600360205260408120819081908180805b60038401548310156108fb575060009050805b835481101561090757835460018501906000908690849081101561000257908252602080832090910154600160a060020a03168252919091526040902054600385018054600587019190869081101561000257906000526020600020900160005060405180828054600181600116156101000203166002900480156109485780601f10610926576101008083540402835291820191610948565b6004803560009081526003602081905260409091209081015481546006830154938301546002939093015490939092906040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b61088d600435602435604080516020818101835260008083528581526003918290529290922090910180548390811015610002579060005260206000209001600050805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109c45780601f10610999576101008083540402835291602001916109c4565b604080516020606435600481810135601f81018490048402850184019095528484526105d894813594602480359560443595608494920191908190840183828082843750949650505050505050600084815260208190526040812080548214610bbb57610bb2565b6105d86004356024356000828152600360209081526040808320600401548484529183905282205414610a07576104a7565b60405180806020018281038252838181518152602001915080519060200190602002808383829060006004602084601f0104600302600f01f1509050019250505060405180910390f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156108ed5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b50929695505050505050565b8582111561091a57819550855082945084505b60019290920191610606565b820191906000526020600020905b815481529060010190602001808311610934575b5050928352505060405190819003602001902085546000908790859081101561000257908252602080832090910154600160a060020a03168252919091526040902054029190910190600101610619565b820191906000526020600020905b8154815290600101906020018083116109a757829003601f168201915b505050505090506104a7565b600160a060020a03808416600090815260018301602052604080822080548601905533909216815220805483900390555b50505050565b6000838152600360205260409020600601805460018101808355909190828015829011610a4557600083815260209020610a45918101908301610b23565b50505060008481526003602052604090206006018054849250600019810190811015610002576000918252602090912001555060016104a7565b505060028054899350909150600019810190811015610002577f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0191909155600087815260208181526040822088815560018181018990558751918501805481865294849020909591851615610100026000190190941604601f9081018390048401939192880190839010610c0857805160ff19168380011785555b50610bab9291505b80821115610b375760008155600101610b23565b5090565b60068801805460009182918990811015610002575090526020808220909701548152958690525050604090932060010154600495909501949094555092949350505050565b8483118015610b8e57508683115b15610b9f5791955060ff8316945085915b600193909301926100f9565b5050600191505b50949350505050565b6002805460018101808355909190828015829011610a7f576000839052610a7f907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908101908301610b23565b82800160010185558215610b1b579182015b82811115610b1b578251826000505591602001919060010190610c1a565b50505060008581526003602052604081208054339350909190811015610002578181526020808220805473ffffffffffffffffffffffffffffffffffffffff191685179055600160a060020a03939093168152600182810184526040822061271090819055918890526003909352600282015560040184905591505b5092915050565b60018054808201808355909190828015829011610ceb57818360005260206000209182019101610ceb9190610b23565b505060018054879350909150600019810190811015610002575080547fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf5019190915560008581526003602052604090208054918201808255828015829011610c3857818360005260206000209182019101610c389190610b23565b50505060008381526003602081905260409091200180548392506000198101908110156100025790600052602060002090016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e4257805160ff19168380011785555b50610a01929150610b23565b50506001015b80821115610b37576000818150805460018160011615610100020316600290046000825580601f10610e245750610dec565b601f016020900490600052602060002090810190610dec9190610b23565b82800160010185558215610de0579182015b82811115610de0578251826000505591602001919060010190610e54565b60008881526003602081905260409091200180548690811015610002579060005260206000209001600050805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610fb35780601f10610f8857610100808354040283529160200191610fb3565b85821115610f0957819550855082945084505b600192909201916104d7565b820191906000526020600020905b815481529060010190602001808311610f23575b5050928352505060405190819003602001902085546000908790859081101561000257908252602080832090910154600160a060020a031682529190915260409020540291909101906001016104ea565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b50939c9b50505050505050505050505056";

  if ("0x6d35ccc0c98513b4808cedbfcba3fa7b8570fc75" != "") {
    org.address = "0x6d35ccc0c98513b4808cedbfcba3fa7b8570fc75";

    // Backward compatibility; Deprecated.
    org.deployed_address = "0x6d35ccc0c98513b4808cedbfcba3fa7b8570fc75";
  }

  org.generated_with = "1.0.3";
  org.contract_name = "org";

  return org;
};

// Nicety for Node.
factory.load = factory;

if (typeof module != "undefined") {
  module.exports = factory;
} else {
  // There will only be one version of Pudding in the browser,
  // and we can use that.
  window.org = factory;
}